/*
* General macros for beta beating
*/

/*
* Selects only monitors for the next twiss command.
*/
select_monitors(): macro = {
    select, flag=twiss, clear;
    select, flag=twiss, pattern="^BPM.*B[12]$", column=name, s, betx, alfx, bety, alfy, 
                                              mux, muy, dx, dy, dpx, dpy, x, y, ddx, ddy,
                                              k1l, k1sl, k2l, k3l, k4l, wx, wy, phix,
                                              phiy, dmux, dmuy, keyword, dbx, dby,
                                              r11, r12, r21, r22;
}


/*
* Selects relevant elements for the next twiss command.
*/
select_elements(): macro = {
    select, flag=twiss, clear;
    select, flag=twiss, class=monitor, column=name, s, betx, alfx, bety, alfy, 
                                              mux, muy, dx, dy, dpx, dpy, x, y, ddx, ddy,
                                              k1l, k1sl, k2l, k3l, k4l, wx, wy, phix,
                                              phiy, dmux, dmuy, keyword, dbx, dby,
                                              r11, r12, r21, r22;
    select, flag=twiss, class=monitor;
    select, flag=twiss, class=instrument;
    select, flag=twiss, class=marker;
    select, flag=twiss, class=quadrupole;
    select, flag=twiss, class=skewquadrupole;
    select, flag=twiss, class=sextupole;
    select, flag=twiss, class=octupole;
    select, flag=twiss, class=multipole;
    select, flag=twiss, class=tkicker;
    select, flag=twiss, class=rcollimator;
    select, flag=twiss, class=collimator;
    select, flag=twiss, class=rbend;
    select, flag=twiss, class=drift;
}


/*
* Simple twiss file output with only monitors.
* @param sequence: name of the sequence to use.
* @param output_file: path to the file to write, it has to be input in "" to
* preserve upper case characters.
* @param dpp: delta p / p to use in the twiss command.
*/
do_twiss_monitors(use_sequence, output_file, dpp): macro = {
    exec, select_monitors();
    twiss, chrom, sequence=use_sequence, deltap=dpp, file=output_file;
};


/*
* Simple twiss file output with relevant elements.
* @param sequence: name of the sequence to use.
* @param output_file: path to the file to write, it has to be input in "" to
* preserve upper case characters.
* @param dpp: delta p / p to use in the twiss command.
*/
do_twiss_elements(use_sequence, output_file, dpp): macro = {
    exec, select_elements();
    twiss, chrom, sequence=use_sequence, deltap=dpp, file=output_file;
};



/*
* Transform the coupling given in R-matrix in MAD-X to f terms.
* It will return the f terms in the variables:
* elem_name_f1001r
* elem_name_f1001r
* elem_name_f1001r
* elem_name_f1001r
* @param table_name: The table where to get the R-matrix.
* @param elem_name: The element name of which to compute the f terms.
*/
get_f_terms_for(table_name, elem_name): macro = {
    NORMR = sqrt(1 + table(table_name, elem_name, R11) * table(table_name, elem_name, R22)
                    - table(table_name, elem_name, R12) * table(table_name, elem_name, R21));
    
    !--- Gb is actually inv(Gb)
    Ga11 = 1 / sqrt(table(table_name, elem_name, BETX));
    Ga22 = sqrt(table(table_name, elem_name, BETX));
    Ga21 = table(table_name, elem_name, ALFX) / sqrt(table(table_name, elem_name, BETX));
    Ga12 = 0;
    Gb21 = -table(table_name, elem_name, ALFY) / sqrt(table(table_name, elem_name, BETY));
    Gb12 = 0;
    Gb11 = sqrt(table(table_name, elem_name, BETY));
    Gb22 = 1 / sqrt(table(table_name, elem_name, BETY));
    
    R11 = table(table_name, elem_name, R11) / NORMR;
    R12 = table(table_name, elem_name, R12) / NORMR; 
    R21 = table(table_name, elem_name, R21) / NORMR;
    R22 = table(table_name, elem_name, R22) / NORMR; 
    
    CP11 =  R22 * Gb11 - R12 * Gb21; CP12 :=  R22 * Gb12 - R12 * Gb22;
    CP21 =  - R21 * Gb11 + R11 * Gb21; CP22 :=  - R21 * Gb12 + R11 * Gb22;
    
    C11 = Ga11 * CP11 + Ga12 * CP21;
    C12 = Ga11 * CP12 + Ga12 * CP22;
    C21 = Ga21 * CP11 + Ga22 * CP21;
    C22 = Ga21 * CP12 + Ga22 * CP22;
    
    GAMMA = sqrt(1 - (C11 * C22 - C12 * C21));
    
    elem_name_f1001r = ( C12 - C21)/4/GAMMA; !--- F1001R
    elem_name_f1001i = ( C11 + C22)/4/GAMMA; !--- F1001I
    elem_name_f1010r = (-C12 - C21)/4/GAMMA; !--- F1010R
    elem_name_f1010i = ( C11 - C22)/4/GAMMA; !--- F1010I
};
