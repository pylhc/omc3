install_errors() : macro = {

  USE, sequence=ring;
  Rr=1.000;
  ON_B2R=1;
  GCUTR=3;
  eoption, seed= 4687;
  select flag = error, clear; select flag=error;
  esave file='./models/errors.dat';
};

install_adt_ac_dipole(natural_qx, natural_qy, driven_qx, driven_qy): macro = {
        betxac=table(twiss,kifbhn,betx);
        betyac=table(twiss,kifbvn,bety);
        hacmap21 = 2 * (cos(2 * pi * driven_qx) - cos(2 * pi * natural_qx)) / (betxac * sin(2 * pi * natural_qx));
        vacmap43 = 2 * (cos(2 * pi * driven_qy) - cos(2 * pi * natural_qy)) / (betyac * sin(2 * pi * natural_qy));
        hacmap: matrix, l=0, rm21=hacmap21;
        vacmap: matrix, l=0, rm43=vacmap43;
        seqedit, sequence=ring;
            flatten;
            install, element=hacmap, at=0.512, from=kifbhn;
            install, element=vacmap, at=0.512, from=kifbvn;
        endedit;
    use, sequence=ring;
}

do_twiss(filename) : macro = {
    select, flag=twiss, clear;

    select, flag=twiss,
        column=name, s, betx, alfx, bety, alfy,
        mux, muy, dx, dy, dpx, dpy, x, y,
        k1l, k1sl, k2l, k3l, k4l, wx, wy, phix,
        phiy, dmux, dmuy, keyword, dbx, dby,
        r11, r12, r21, r22,
        pattern="^BPM";
    twiss, chrom, sequence=ring, file=filename;

}

do_twiss_elements(filename) : macro = {
    select, flag=twiss,
        column=name, s, betx, alfx, bety, alfy,
        mux, muy, dx, dy, dpx, dpy, x, y,
        k1l, k1sl, k2l, k3l, k4l, wx, wy, phix,
        phiy, dmux, dmuy, keyword, dbx, dby,
        r11, r12, r21, r22,
        pattern="^BPM";
    select, flag=twiss, class=monitor;
    select, flag=twiss, class=quadrupole;
    select, flag=twiss, class=skewquadrupole;
    select, flag=twiss, class=sextupole;
    select, flag=twiss, class=octupole;
    select, flag=twiss, class=tkicker;
    select, flag=twiss, class=rcollimator;
    select, flag=twiss, class=collimator;
    select, flag=twiss, class=rbend;
    select, flag=twiss, class=instrument;
    select, flag=twiss, class=matrix;
    !select, flag=twiss, class=drift;
    select, flag=twiss, pattern="^IP";
    twiss, chrom, sequence=ring, file=filename;
}

find_complete_tunes(nqx, nqy): macro = {
    int_qx = floor(nqx);
    int_qy = floor(nqy);
    if(int_qx == 0 || int_qx == 0){
        use, sequence=ring;
        twiss;
        int_qx = floor(table(summ, q1));
        int_qy = floor(table(summ, q2));
    }
    total_qx = int_qx + frac(nqx);
    total_qy = int_qy + frac(nqy);
};


match_tunes(nqx, nqy): macro = {
    exec, find_complete_tunes(nqx, nqy);
    match;
    vary, name=qd->k1;
    vary, name=qf->k1;
    constraint, range=#E, mux=total_qx, muy=total_qy;
    lmdif;
    endmatch;
};