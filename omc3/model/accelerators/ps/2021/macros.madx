ptc_twiss_macro(order, dp, slice_flag): macro = {
  ptc_create_universe;
  ptc_create_layout, time=false, model=2, exact=true, method=6, nst=3;
  IF (slice_flag == 1){
    select, flag=ptc_twiss, clear;
    select, flag=ptc_twiss, column=name,keyword,s,l,x,px,beta11,beta22,disp1,k1l;
    ptc_twiss, closed_orbit, icase=56, no=order, deltap=dp, table=ptc_twiss, summary_table=ptc_twiss_summary, slice_magnets=true;
  }
  ELSE{
    select, flag=ptc_twiss, clear;
    select, flag=ptc_twiss, column=name,keyword,s,x,px,beta11,alfa11,beta22,alfa22,disp1,disp2,mu1,mu2,energy,l,angle,K1L,K2L,K3L,HKICK,SLOT_ID;    
    ptc_twiss, closed_orbit, icase=56, no=order, deltap=dp, table=ptc_twiss, summary_table=ptc_twiss_summary, normal;
  }
  ptc_end;
};

write_ptc_twiss(filename) : macro = {
  write, table=ptc_twiss, file=filename;
};

ptc_twiss_MTE_macro(order, x1, x2, slice_flag): macro = {
  ptc_create_universe;
  ptc_create_layout, time=false, model=2, method=6, nst=3, exact=true;
  IF (slice_flag == 1){
    select, flag=ptc_twiss, clear;
    select, flag=ptc_twiss, column=name,keyword,s,l,x,px,beta11,beta22,disp1,k1l;
    ptc_twiss, closed_orbit, icase=56, no=order, table=ptc_twiss, summary_table=ptc_twiss_summary, x = x1, px = x2, slice_magnets=true;
  }
  ELSE{
    select, flag=ptc_twiss, clear;
    select, flag=ptc_twiss, column=name,keyword,s,x,px,beta11,alfa11,beta22,alfa22,disp1,disp2,mu1,mu2,energy,l,angle,K1L,K2L,K3L,HKICK,SLOT_ID;    
    ptc_twiss, closed_orbit, icase=56, no=order, table=ptc_twiss, summary_table=ptc_twiss_summary, x = x1, px = x2;
  }
  ptc_end;
};


/******************************************************************
 * Tune knobs using the low-energy quads
******************************************************************/

match_tunes_ptc(qx, qy) : macro = {

  match, use_macro;
          vary, name = kf;
          vary, name = kd;
          use_macro, name = ptc_twiss_macro(2,0,0);
          constraint, expr = table(ptc_twiss_summary,Q1)  = qx;
          constraint, expr = table(ptc_twiss_summary,Q2)  = qy;
  jacobian,calls=50000,bisec=3, tolerance = 1E-15;
  ENDMATCH;

};

match_tunes(qx, qy, dqx, dqy) : macro = {

  match, sequence=ps;
          vary, name = kf, step=0.00001;
          vary, name = kd, step=0.00001;
          constraint, range = #E, mux = qx + dqx, muy = qy + dqy;
  jacobian,calls=50000,bisec=3, tolerance = 1E-20;
  ENDMATCH;

};

tunes_leq_knob_factors(qx0, qy0): macro = {

  kf_0 = kf; 
  kd_0 = kd;

  dq = 1E-2;

  qx0 = qx0 + 6;
  qy0 = qy0 + 6;

  exec, match_tunes(qx0, qy0, 0, 0);

  kf_1 = kf; 
  kd_1 = kd;

  exec, match_tunes(qx0, qy0, dq, 0);

  dkf_x = (kf - kf_1) / dq;
  dkd_x = (kd - kd_1) / dq;

  exec, match_tunes(qx0, qy0, 0, dq);

  dkf_y = (kf - kf_1) / dq;
  dkd_y = (kd - kd_1) / dq;  

  qx_leq = 0;
  qy_leq = 0;

  exec, tunes_leq_knob;

};

tunes_leq_knob(): macro = {
  
  kf := kf_0 + dkf_x * qx_leq + dkf_y * qy_leq;
  kd := kd_0 + dkd_x * qx_leq + dkd_y * qy_leq;

};

unassign_LEQ: macros = {

  kf = 0.;
  kd = 0.;

}

unassign_BSW42: macros = {

  kpibsw40 = 0.;
  kpibsw41 = 0.;
  kpibsw42 = 0.;
  kpibsw43 = 0.;
  kpibsw44 = 0.;

}

unassign_BSW26: macros = {

  kpibsw26 = 0.;

}

unassign_BSW16: macros = {

  kpebsw12 = 0.;
  kpebsw14 = 0.;
  kpebsw20 = 0.;
  kpebsw22 = 0.;

}

unassign_QKE16: macros = {

  qke16 = kpeqke16;
  kpeqke16 = 0.;

}

/******************************************************************
 * Proton injection bump knobs
******************************************************************/

match_bsw42_bump(LHC_or_HI_optics, dx, dpx) : macro = {

  match, sequence=ps;
  vary,name=kPIBSW40, step=0.00001; 
  vary,name=kPIBSW42, step=0.00001; 
  vary,name=kPIBSW43, step=0.00001; 
  vary,name=kPIBSW44, step=0.00001; 
  IF (LHC_or_HI_optics == 0){
    constraint, range=PI.BSW42, x = 0.03 + dx, px = -0.0089 + dpx;
    constraint, range=PI.KFA45, x = 0.0, px = 0.0;
  }
  ELSE{
    !vary,name=kPIBSW41, step=0.00001;
    vary,name=kPIQLB, step=0.00001; 
    constraint, range=PI.BSW42, x = 0.03 + dx, px = -0.0089 + dpx, betx = 7.9;
    constraint, range=PI.KFA45, x = 0.0, px = 0.0;
    !constraint, range=PI.BSW41, x < 0.03;
    !constraint, range=PI.BSW42, x = 0.029 + dx, px = -0.0090 + dpx, betx = 7.9;
    !constraint, range=PI.BSW43, x > -0.02;
    constraint, range=PI.QLB49, x = 0.0, px = 0.0;
    constraint, range=PA.C10.51, x = 0.0, px = 0.0;
  }
  Jacobian, calls=50000, tolerance=1.0e-25;
  endmatch;

};

bsw42_knob_factors(LHC_or_HI_optics): macro = {
  
  exec, match_bsw42_bump(LHC_or_HI_optics, 0., 0.);

  kPIBSW40_0 = kPIBSW40; 
  kPIBSW41_0 = kPIBSW41;
  kPIBSW42_0 = kPIBSW42;
  kPIBSW43_0 = kPIBSW43;
  kPIBSW44_0 = kPIBSW44;

  twiss;
  x0 = Table(twiss, PI.BSW42, X);

  dkPIBSW40_x_abs = kPIBSW40 / x0 * 1E-3;
  dkPIBSW41_x_abs = kPIBSW41 / x0 * 1E-3;
  dkPIBSW42_x_abs = kPIBSW42 / x0 * 1E-3;
  dkPIBSW43_x_abs = kPIBSW43 / x0 * 1E-3;
  dkPIBSW44_x_abs = kPIBSW44 / x0 * 1E-3;

  i   = 0; 
  dx  = 5E-3;
  dpx = 5E-3;

  exec, match_bsw42_bump(LHC_or_HI_optics, dx, 0.);

  dkPIBSW40_x = (kPIBSW40 - kPIBSW40_0) / dx * 1E-3;
  dkPIBSW41_x = (kPIBSW41 - kPIBSW41_0) / dx * 1E-3;
  dkPIBSW42_x = (kPIBSW42 - kPIBSW42_0) / dx * 1E-3;
  dkPIBSW43_x = (kPIBSW43 - kPIBSW43_0) / dx * 1E-3;
  dkPIBSW44_x = (kPIBSW44 - kPIBSW44_0) / dx * 1E-3;

  exec, match_bsw42_bump(LHC_or_HI_optics, 0., dpx);

  dkPIBSW40_px = (kPIBSW40 - kPIBSW40_0) / dpx * 1E-3;
  dkPIBSW41_px = (kPIBSW41 - kPIBSW41_0) / dpx * 1E-3;
  dkPIBSW42_px = (kPIBSW42 - kPIBSW42_0) / dpx * 1E-3;
  dkPIBSW43_px = (kPIBSW43 - kPIBSW43_0) / dpx * 1E-3;
  dkPIBSW44_px = (kPIBSW44 - kPIBSW44_0) / dpx * 1E-3;

  bsw42_x_mm_abs = x0*1E3;
  bsw42_x_mm = 0;
  bsw42_px_mrad = 0;

  exec, bsw42_knob;

};

bsw42_knob(): macro = {
  
  kPIBSW40 := dkPIBSW40_x_abs * bsw42_x_mm_abs + dkPIBSW40_x * bsw42_x_mm + dkPIBSW40_px * bsw42_px_mrad;
  kPIBSW41 := dkPIBSW41_x_abs * bsw42_x_mm_abs + dkPIBSW41_x * bsw42_x_mm + dkPIBSW41_px * bsw42_px_mrad;
  kPIBSW42 := dkPIBSW42_x_abs * bsw42_x_mm_abs + dkPIBSW42_x * bsw42_x_mm + dkPIBSW42_px * bsw42_px_mrad;
  kPIBSW43 := dkPIBSW43_x_abs * bsw42_x_mm_abs + dkPIBSW43_x * bsw42_x_mm + dkPIBSW43_px * bsw42_px_mrad;
  kPIBSW44 := dkPIBSW44_x_abs * bsw42_x_mm_abs + dkPIBSW44_x * bsw42_x_mm + dkPIBSW44_px * bsw42_px_mrad; 

};

/******************************************************************
 * Ion injection bump knobs
******************************************************************/

match_bsw26_bump(): macro = {

  match, sequence=ps;
  vary,name=kPIBSW26, step=0.00001; 
  constraint, range=PI.BTV26, x = 0.0173; ! based on 2018 LSA settings 
  Jacobian, calls=50000, tolerance=1.0e-25;
  endmatch;

};

bsw26_knob_factors(): macro = {
  
  exec, match_bsw26_bump();

  kpibsw26_0 = kpibsw26; 

  twiss;
  x0 = Table(twiss, PI.BTV26, X);

  dkpismh26_x_abs = kpibsw26 / x0 * 1E-3;

};

/******************************************************************
 * Extraction bump knobs
******************************************************************/

match_bsw16_bump(scenario_flag, dx, dpx) : macro = {

  match, sequence=ps;
  ! standard matching for AD and TOF beams
  vary,name=kPEBSW14, step=0.00001; 
  vary,name=kPEBSW22, step=0.00001;

  IF (scenario_flag == 1){
    ! matching for LHC-type beams
    vary,name=kPEBSW12, step=0.00001, lower=0.00037; 
    vary,name=kPEBSW20, step=0.00001, lower=0.00037; 
    constraint, range=PE.BTV16, x = x0 + dx, px = px0 + dpx;
    constraint, range=PR.QDW32/PR.QDN50, x = 0.;
  }
  ELSEIF (scenario_flag == 2) {
    ! matching for SFTPRO beams
    vary,name=kPEBSW12, step=0.00001; 
    vary,name=kPEBSW20, step=0.00001; 
    constraint, range=PE.BTV16, x = x0 + dx, px = px0 + dpx;
    constraint, range=PR.QDW32/PR.QDN50, x = 0.;
  }
  ELSE {
    constraint, range=PE.BTV16, x = x0 + dx;
    constraint, range=PR.QDW32/PR.QDN50, x < xmax, x > -xmax;
  }

  Jacobian, calls=50000, tolerance=1.0e-20;
  endmatch;

};

match_bsw16_orthogonal_bump(dx15, dx16) : macro = {
        
  match, sequence=ps;
  vary,name=kPEBSW14, step=0.00001; 
  vary,name=kPEBSW22, step=0.00001;
  vary,name=kPEBSW12, step=0.00001; 
  vary,name=kPEBSW20, step=0.00001; 
  constraint, range=PE.TPS15, x = x15 + dx15;
  constraint, range=PE.BTV16, x = x16 + dx16;
  constraint, range=PR.QDW32/PR.QDN50, x = 0.;
  Jacobian, calls=50000, tolerance=1.0e-20;
  endmatch;
 
}

bsw16_knob_factors(scenario_flag): macro = {
  
  kPEBSW12_0 = kPEBSW12; 
  kPEBSW14_0 = kPEBSW14;
  kPEBSW20_0 = kPEBSW20;
  kPEBSW22_0 = kPEBSW22;

  twiss;
  x0 = Table(twiss, PE.BTV16, X);

  dkPEBSW12_x_abs = (kPEBSW12_0) / x0 * 1E-3;
  dkPEBSW14_x_abs = (kPEBSW14_0) / x0 * 1E-3;
  dkPEBSW20_x_abs = (kPEBSW20_0) / x0 * 1E-3;
  dkPEBSW22_x_abs = (kPEBSW22_0) / x0 * 1E-3;

  smh16_x_mm_abs = x0*1E3;
  
  IF (scenario_flag <> 0.) {
  
    dx  = 1E-3;
    dpx = 1E-4;

    exec, match_bsw16_bump(scenario_flag, dx, 0.);

    dkPEBSW12_x = (kPEBSW12 - kPEBSW12_0) / dx * 1E-3;
    dkPEBSW14_x = (kPEBSW14 - kPEBSW14_0) / dx * 1E-3;
    dkPEBSW20_x = (kPEBSW20 - kPEBSW20_0) / dx * 1E-3;
    dkPEBSW22_x = (kPEBSW22 - kPEBSW22_0) / dx * 1E-3;

    exec, match_bsw16_bump(scenario_flag, 0., dpx);

    dkPEBSW12_px = (kPEBSW12 - kPEBSW12_0) / dpx * 1E-6;
    dkPEBSW14_px = (kPEBSW14 - kPEBSW14_0) / dpx * 1E-6;
    dkPEBSW20_px = (kPEBSW20 - kPEBSW20_0) / dpx * 1E-6;
    dkPEBSW22_px = (kPEBSW22 - kPEBSW22_0) / dpx * 1E-6;

  }

    smh16_x_mm = 0;
    smh16_px_urad = 0;

    exec, bsw16_knob();

  IF (scenario_flag == 2) {

    twiss;
    x15 = Table(twiss, PE.TPS15, X);
    x16 = Table(twiss, PE.BTV16, X);

    dx15 = 1E-3;
    dx16 = 1E-3;

    exec, match_bsw16_orthogonal_bump(dx15, 0);

    dkPEBSW12_ortho_x15 = (kPEBSW12 - kPEBSW12_0) / dx15 * 1E-3;
    dkPEBSW14_ortho_x15 = (kPEBSW14 - kPEBSW14_0) / dx15 * 1E-3;
    dkPEBSW20_ortho_x15 = (kPEBSW20 - kPEBSW20_0) / dx15 * 1E-3;
    dkPEBSW22_ortho_x15 = (kPEBSW22 - kPEBSW22_0) / dx15 * 1E-3;

    exec, match_bsw16_orthogonal_bump(0, dx16);

    dkPEBSW12_ortho_x16 = (kPEBSW12 - kPEBSW12_0) / dx16 * 1E-3;
    dkPEBSW14_ortho_x16 = (kPEBSW14 - kPEBSW14_0) / dx16 * 1E-3;
    dkPEBSW20_ortho_x16 = (kPEBSW20 - kPEBSW20_0) / dx16 * 1E-3;
    dkPEBSW22_ortho_x16 = (kPEBSW22 - kPEBSW22_0) / dx16 * 1E-3;

  }

    tps15_ortho_x_mm = 0;
    smh16_ortho_x_mm = 0;

    exec, bsw16_knob();

};

bsw16_knob(): macro = {
  
  kPEBSW12 := dkPEBSW12_x_abs * smh16_x_mm_abs + dkPEBSW12_x * smh16_x_mm + dkPEBSW12_px * smh16_px_urad + dkPEBSW12_ortho_x15 * tps15_ortho_x_mm + dkPEBSW12_ortho_x16 * smh16_ortho_x_mm;
  kPEBSW14 := dkPEBSW14_x_abs * smh16_x_mm_abs + dkPEBSW14_x * smh16_x_mm + dkPEBSW14_px * smh16_px_urad + dkPEBSW14_ortho_x15 * tps15_ortho_x_mm + dkPEBSW14_ortho_x16 * smh16_ortho_x_mm;
  kPEBSW20 := dkPEBSW20_x_abs * smh16_x_mm_abs + dkPEBSW20_x * smh16_x_mm + dkPEBSW20_px * smh16_px_urad + dkPEBSW20_ortho_x15 * tps15_ortho_x_mm + dkPEBSW20_ortho_x16 * smh16_ortho_x_mm;
  kPEBSW22 := dkPEBSW22_x_abs * smh16_x_mm_abs + dkPEBSW22_x * smh16_x_mm + dkPEBSW22_px * smh16_px_urad + dkPEBSW22_ortho_x15 * tps15_ortho_x_mm + dkPEBSW22_ortho_x16 * smh16_ortho_x_mm;

};

/******************************************************************
 * Knobs with the high-energy orbit correctors
******************************************************************/

match_dhzoc_bump(x0, px0, dx, dpx, location) : macro = {

  match, sequence=ps;
  vary,name=kPRDHZOC05, step=0.00001; 
  vary,name=kPRDHZOC18, step=0.00001; 
  vary,name=kPRDHZOC60, step=0.00001; 
  
  IF (dx <> 0.) {
    constraint, range=location, x = x0 + dx, px = px0;
  }
  ELSEIF (dpx <> 0.) {
    constraint, range=location, x = x0, px = px0 + dpx;
  }
  Jacobian, calls=50000, tolerance=1.0e-25;
  endmatch;

};

dhzoc_knob_factors(): macro = {
  
    !---------------------------------------
    ! Knobs at SMH16
    !---------------------------------------

    twiss;
    x_16  = table(twiss, PE.BTV16, x);    
    px_16 = table(twiss, PE.BTV16, px);

    dx  = 1E-3;
    dpx = 1E-4;

    exec, match_dhzoc_bump(x_16, px_16, dx, 0., PE.BTV16);
    twiss;

    dkPRDHZOC05_SMH16_x = kPRDHZOC05 / dx * 1E-3;
    dkPRDHZOC18_SMH16_x = kPRDHZOC18 / dx * 1E-3;
    dkPRDHZOC60_SMH16_x = kPRDHZOC60 / dx * 1E-3;

    exec, match_dhzoc_bump(x_16, px_16, 0., dpx, PE.BTV16);

    dkPRDHZOC05_SMH16_px = kPRDHZOC05 / dpx * 1E-6;
    dkPRDHZOC18_SMH16_px = kPRDHZOC18 / dpx * 1E-6;
    dkPRDHZOC60_SMH16_px = kPRDHZOC60 / dpx * 1E-6;

    dhzoc_smh16_x_mm = 0;
    dhzoc_smh16_px_urad = 0;

    exec, dhzoc_knob;

    !---------------------------------------
    ! Knobs at PR.QSK19
    !---------------------------------------

    twiss;
    x_19  = table(twiss, PR.QSK19, x);    
    px_19 = table(twiss, PR.QSK19, px);

    dx  = 1E-3;
    dpx = 1E-4;

    exec, match_dhzoc_bump(x_19, px_19, dx, 0., PR.QSK19);
    twiss;

    dkPRDHZOC05_QSK19_x = kPRDHZOC05 / dx * 1E-3;
    dkPRDHZOC18_QSK19_x = kPRDHZOC18 / dx * 1E-3;
    dkPRDHZOC60_QSK19_x = kPRDHZOC60 / dx * 1E-3;

    exec, match_dhzoc_bump(x_19, px_19, 0., dpx, PR.QSK19);

    dkPRDHZOC05_QSK19_px = kPRDHZOC05 / dpx * 1E-6;
    dkPRDHZOC18_QSK19_px = kPRDHZOC18 / dpx * 1E-6;
    dkPRDHZOC60_QSK19_px = kPRDHZOC60 / dpx * 1E-6;

    dhzoc_qsk19_x_mm = 0;
    dhzoc_qsk19_px_urad = 0;

    exec, dhzoc_knob;

};

dhzoc_knob(): macro = {

    kPRDHZOC05 := dkPRDHZOC05_SMH16_x * dhzoc_smh16_x_mm + dkPRDHZOC05_QSK19_x * dhzoc_qsk19_x_mm + dkPRDHZOC05_SMH16_px * dhzoc_smh16_px_urad + dkPRDHZOC05_qsk19_px * dhzoc_qsk19_px_urad;
    kPRDHZOC18 := dkPRDHZOC18_SMH16_x * dhzoc_smh16_x_mm + dkPRDHZOC18_QSK19_x * dhzoc_qsk19_x_mm + dkPRDHZOC18_SMH16_px * dhzoc_smh16_px_urad + dkPRDHZOC18_qsk19_px * dhzoc_qsk19_px_urad;
    kPRDHZOC60 := dkPRDHZOC60_SMH16_x * dhzoc_smh16_x_mm + dkPRDHZOC60_QSK19_x * dhzoc_qsk19_x_mm + dkPRDHZOC60_SMH16_px * dhzoc_smh16_px_urad + dkPRDHZOC60_qsk19_px * dhzoc_qsk19_px_urad;

};


/******************************************************************
 * Writing strengths and knobs to file
******************************************************************/

write_str_file(filename): macro = {
  assign, echo = filename;
  print, text = "/**********************************************************************************";
  print, text = "*                             SBENDs and MULTIPOLES in MUs";
  print, text = "***********************************************************************************/";
  print, text = "";
  value, k1PRBHF, k1PRBHD, k2PRBHF, k2PRBHD, k2PRMP, k2PRMPJ, k3PRMPF, k3PRMPD;
  print, text = "";
  print, text = "/**********************************************************************************";
  print, text = "*                                    PFW and F8L";
  print, text = "***********************************************************************************/";
  print, text = "";
  value, k1PRPFWF, k1PRPFWD, k2PRPFWF, k2PRPFWD, k3PRPFWF, k3PRPFWD, k1PRF8L;
  print, text = "";
  print, text = "/**********************************************************************************";
  print, text = "*                                    Injection dipoles";
  print, text = "***********************************************************************************/";
  print, text = "";
  value, kPIBSW26;
  value, kPIBSW40, kPIBSW41, kPIBSW42, kPIBSW43, kPIBSW44;
  print, text = "";
  print, text = "/**********************************************************************************";
  print, text = "*                                    Extraction dipoles";
  print, text = "***********************************************************************************/";
  print, text = "";
  value, kPEBSW12, kPEBSW14, kPEBSW20, kPEBSW22;
  value, kPEBSW23, kPEBSW57;
  print, text = ""; 
  print, text = "/**********************************************************************************";
  print, text = "*                                      Quadrupoles";
  print, text = "***********************************************************************************/";
  print, text = "";
  value, kF, kD, kPRQSE, kPEQKE16, kPIQLB;
  print, text = "";
  print, text = "/**********************************************************************************";
  print, text = "*                                       Sextupoles";
  print, text = "***********************************************************************************/";
  print, text = "";
  value, kPRXNO39, kPRXNO55, kPRXNO, kPRXSE;
  print, text = "";
  print, text = "/**********************************************************************************";
  print, text = "*                                       Octupoles";
  print, text = "***********************************************************************************/";
  print, text = "";
  value, kPRONO39, kPRONO55, kPRODN;
  print, text = "";
  print, text = "/**********************************************************************************";
  print, text = "*                                   KNOBS";
  print, text = "***********************************************************************************/";
  IF (dkPIBSW40_x <> 0.) {
    print,  text = "";   
    print,  text = "!-------------------------------------------------";      
    print,  text = "! Proton injection bump"; 
    print,  text = "!-------------------------------------------------";
    print,  text = "";  
    print, text = "bsw42_x_mm_abs_active  =              1 ;";         
    printf, text = "bsw42_x_mm_abs     = %F ;", value = x0*1e3;
    print, text = "bsw42_x_mm         =       0.0000000000 ;";
    print, text = "bsw42_px_mrad      =       0.0000000000 ;";
    print,  text = "";      

    IF (second_injection == 1){
      printf, text = "bsw42.2_x_mm_abs   = %F ;", value = x0*1e3;
      print, text = "bsw42.2_x_mm       =       0.0000000000 ;";
      print, text = "bsw42.2_px_mrad    =       0.0000000000 ;";
      print,  text = "";  
    }

    printf, text = "dkPIBSW40_x_abs    = %F ;", value = dkPIBSW40_x_abs;
    printf, text = "dkPIBSW41_x_abs    = %F ;", value = dkPIBSW41_x_abs;
    printf, text = "dkPIBSW42_x_abs    = %F ;", value = dkPIBSW42_x_abs;
    printf, text = "dkPIBSW43_x_abs    = %F ;", value = dkPIBSW43_x_abs;
    printf, text = "dkPIBSW44_x_abs    = %F ;", value = dkPIBSW44_x_abs;
    print,  text = "";      
    printf, text = "dkPIBSW40_x        = %F ;", value = dkPIBSW40_x;
    printf, text = "dkPIBSW41_x        = %F ;", value = dkPIBSW41_x;
    printf, text = "dkPIBSW42_x        = %F ;", value = dkPIBSW42_x;
    printf, text = "dkPIBSW43_x        = %F ;", value = dkPIBSW43_x;
    printf, text = "dkPIBSW44_x        = %F ;", value = dkPIBSW44_x;
    print,  text = "";      
    printf, text = "dkPIBSW40_px       = %F ;", value = dkPIBSW40_px;
    printf, text = "dkPIBSW41_px       = %F ;", value = dkPIBSW41_px;
    printf, text = "dkPIBSW42_px       = %F ;", value = dkPIBSW42_px;
    printf, text = "dkPIBSW43_px       = %F ;", value = dkPIBSW43_px;
    printf, text = "dkPIBSW44_px       = %F ;", value = dkPIBSW44_px;
    print,  text = "";      
    print, text = "kPIBSW40 := dkPIBSW40_x_abs * bsw42_x_mm_abs + dkPIBSW40_x * bsw42_x_mm + dkPIBSW40_px * bsw42_px_mrad;";
    print, text = "kPIBSW41 := dkPIBSW41_x_abs * bsw42_x_mm_abs + dkPIBSW41_x * bsw42_x_mm + dkPIBSW41_px * bsw42_px_mrad;";
    print, text = "kPIBSW42 := dkPIBSW42_x_abs * bsw42_x_mm_abs + dkPIBSW42_x * bsw42_x_mm + dkPIBSW42_px * bsw42_px_mrad;";
    print, text = "kPIBSW43 := dkPIBSW43_x_abs * bsw42_x_mm_abs + dkPIBSW43_x * bsw42_x_mm + dkPIBSW43_px * bsw42_px_mrad;";
    print, text = "kPIBSW44 := dkPIBSW44_x_abs * bsw42_x_mm_abs + dkPIBSW44_x * bsw42_x_mm + dkPIBSW44_px * bsw42_px_mrad;";
    print,  text = "";  
    
    IF (second_injection == 1){
  
      print, text = "kPI2BSW40 := dkPIBSW40_x_abs * bsw42.2_x_mm_abs + dkPIBSW40_x * bsw42.2_x_mm + dkPIBSW40_px * bsw42.2_px_mrad;";
      print, text = "kPI2BSW41 := dkPIBSW41_x_abs * bsw42.2_x_mm_abs + dkPIBSW41_x * bsw42.2_x_mm + dkPIBSW41_px * bsw42.2_px_mrad;";
      print, text = "kPI2BSW42 := dkPIBSW42_x_abs * bsw42.2_x_mm_abs + dkPIBSW42_x * bsw42.2_x_mm + dkPIBSW42_px * bsw42.2_px_mrad;";
      print, text = "kPI2BSW43 := dkPIBSW43_x_abs * bsw42.2_x_mm_abs + dkPIBSW43_x * bsw42.2_x_mm + dkPIBSW43_px * bsw42.2_px_mrad;";
      print, text = "kPI2BSW44 := dkPIBSW44_x_abs * bsw42.2_x_mm_abs + dkPIBSW44_x * bsw42.2_x_mm + dkPIBSW44_px * bsw42.2_px_mrad;";
      print,  text = "";  

    }

  }
  ELSE{
    print,  text = "";   
    print,  text = "!-------------------------------------------------";      
    print,  text = "! Proton injection bump"; 
    print,  text = "!-------------------------------------------------";
    print,  text = "";   
    print, text = "bsw42_x_mm_abs_active  =              0 ;";
    print,  text = "";   
  }

  IF (dkPISMH26_x_abs <> 0.) {
    print,  text = "";   
    print,  text = "!-------------------------------------------------";      
    print,  text = "! Ion injection bump"; 
    print,  text = "!-------------------------------------------------";
    print,  text = "";           
    print, text = "smh26_x_mm_abs_active  =              1 ;";
    printf, text = "smh26_x_mm_abs      = %F ;", value = x0*1e3;
    print,  text = "";      
    printf, text = "dkPISMH26_x_abs     = %F ;", value = dkPISMH26_x_abs;
    print,  text = "";      
    print, text = "kPIBSW26 := dkPISMH26_x_abs * smh26_x_mm_abs;";
    print,  text = "";  
  } 
  ELSE{
    print,  text = "";   
    print,  text = "!-------------------------------------------------";      
    print,  text = "! Ion injection bump"; 
    print,  text = "!-------------------------------------------------";
    print,  text = ""; 
    print, text = "smh26_x_mm_abs_active  =              0 ;";
    print,  text = ""; 
  }

  IF (dkf_x <> 0.) {  
    print,  text = "";   
    print,  text = "!-------------------------------------------------";      
    print,  text = "! Tune knobs using the low energy quadrupoles"; 
    print,  text = "!-------------------------------------------------"; 
    print,  text = "";      
    print,  text = "qx_leq             =       0.0000000000 ;";
    print,  text = "qy_leq             =       0.0000000000 ;";  
    print,  text = "";      
    printf, text = "dkf_x              = %F ;", value = dkf_x;
    printf, text = "dkd_x              = %F ;", value = dkd_x;
    print,  text = ""; 
    printf, text = "dkf_y              = %F ;", value = dkf_y;
    printf, text = "dkd_y              = %F ;", value = dkd_y;
    print,  text = "";           
    printf, text = "kf := %F + dkf_x * qx_leq + dkf_y * qy_leq;", value = kf_0;
    printf, text = "kd := %F + dkd_x * qx_leq + dkd_y * qy_leq;", value = kd_0;
    print,  text = "";
  }  

  IF (dkPEBSW14_x_abs <> 0.) {
    print,  text = "";   
    print,  text = "!-------------------------------------------------";      
    print,  text = "! Extraction bump"; 
    print,  text = "!-------------------------------------------------";
    print,  text = "";  
    print, text = "smh16_x_mm_abs_active  =                  1 ;";         
    printf, text = "smh16_x_mm_abs         = %F ;", value = smh16_x_mm_abs;
    print, text = "smh16_x_mm             =       0.0000000000 ;";
    print, text = "smh16_px_urad          =       0.0000000000 ;";
    print, text = "tps15_ortho_x_mm       =       0.0000000000 ;";    
    print, text = "smh16_ortho_x_mm       =       0.0000000000 ;";    
    print,  text = "";      
    printf, text = "dkPEBSW12_x_abs        = %F ;", value = dkPEBSW12_x_abs;
    printf, text = "dkPEBSW14_x_abs        = %F ;", value = dkPEBSW14_x_abs;
    printf, text = "dkPEBSW20_x_abs        = %F ;", value = dkPEBSW20_x_abs;
    printf, text = "dkPEBSW22_x_abs        = %F ;", value = dkPEBSW22_x_abs;
    print,  text = "";      
    printf, text = "dkPEBSW12_x            = %F ;", value = dkPEBSW12_x;
    printf, text = "dkPEBSW14_x            = %F ;", value = dkPEBSW14_x;
    printf, text = "dkPEBSW20_x            = %F ;", value = dkPEBSW20_x;
    printf, text = "dkPEBSW22_x            = %F ;", value = dkPEBSW22_x;
    print,  text = "";      
    printf, text = "dkPEBSW12_px           = %F ;", value = dkPEBSW12_px;
    printf, text = "dkPEBSW14_px           = %F ;", value = dkPEBSW14_px;
    printf, text = "dkPEBSW20_px           = %F ;", value = dkPEBSW20_px;
    printf, text = "dkPEBSW22_px           = %F ;", value = dkPEBSW22_px;
    print,  text = "";   
    printf, text = "dkPEBSW12_ortho_x15    = %F ;", value = dkPEBSW12_ortho_x15;
    printf, text = "dkPEBSW14_ortho_x15    = %F ;", value = dkPEBSW14_ortho_x15;
    printf, text = "dkPEBSW20_ortho_x15    = %F ;", value = dkPEBSW20_ortho_x15;
    printf, text = "dkPEBSW22_ortho_x15    = %F ;", value = dkPEBSW22_ortho_x15;
    print,  text = ""; 
    printf, text = "dkPEBSW12_ortho_x16    = %F ;", value = dkPEBSW12_ortho_x16;
    printf, text = "dkPEBSW14_ortho_x16    = %F ;", value = dkPEBSW14_ortho_x16;
    printf, text = "dkPEBSW20_ortho_x16    = %F ;", value = dkPEBSW20_ortho_x16;
    printf, text = "dkPEBSW22_ortho_x16    = %F ;", value = dkPEBSW22_ortho_x16;
    print,  text = "";          
    print, text = "kPEBSW12 := dkPEBSW12_x_abs * smh16_x_mm_abs + dkPEBSW12_x * smh16_x_mm + dkPEBSW12_px * smh16_px_urad + dkPEBSW12_ortho_x15 * tps15_ortho_x_mm + dkPEBSW12_ortho_x16 * smh16_ortho_x_mm;";
    print, text = "kPEBSW14 := dkPEBSW14_x_abs * smh16_x_mm_abs + dkPEBSW14_x * smh16_x_mm + dkPEBSW14_px * smh16_px_urad + dkPEBSW14_ortho_x15 * tps15_ortho_x_mm + dkPEBSW14_ortho_x16 * smh16_ortho_x_mm;";
    print, text = "kPEBSW20 := dkPEBSW20_x_abs * smh16_x_mm_abs + dkPEBSW20_x * smh16_x_mm + dkPEBSW20_px * smh16_px_urad + dkPEBSW20_ortho_x15 * tps15_ortho_x_mm + dkPEBSW20_ortho_x16 * smh16_ortho_x_mm;";
    print, text = "kPEBSW22 := dkPEBSW22_x_abs * smh16_x_mm_abs + dkPEBSW22_x * smh16_x_mm + dkPEBSW22_px * smh16_px_urad + dkPEBSW22_ortho_x15 * tps15_ortho_x_mm + dkPEBSW22_ortho_x16 * smh16_ortho_x_mm;";
    print,  text = "";  
  } 
  ELSE{
    print,  text = "";   
    print,  text = "!-------------------------------------------------";      
    print,  text = "! Extraction bump"; 
    print,  text = "!-------------------------------------------------";
    print,  text = "";  
    print, text = "smh16_x_mm_abs_active  =              0 ;";
    print,  text = "";   
  }

  IF (dkPRDHZOC05_SMH16_x <> 0.) {
    print,  text = "";   
    print,  text = "!-------------------------------------------------";      
    print,  text = "! High-energy corrector knobs"; 
    print,  text = "!-------------------------------------------------";
    print,  text = "";  
    print,  text = "dhzoc_smh16_x_mm     =                    0 ;";
    print,  text = "dhzoc_qsk19_x_mm     =                    0 ;";
    print,  text = "dhzoc_smh16_px_urad  =                    0 ;";
    print,  text = "dhzoc_qsk19_px_urad  =                    0 ;";
    print,  text = "";      
    printf, text = "dkPRDHZOC05_SMH16_x      = %F ;", value = dkPRDHZOC05_SMH16_x;
    printf, text = "dkPRDHZOC18_SMH16_x      = %F ;", value = dkPRDHZOC18_SMH16_x;
    printf, text = "dkPRDHZOC60_SMH16_x      = %F ;", value = dkPRDHZOC60_SMH16_x;
    print,  text = "";   
    printf, text = "dkPRDHZOC05_QSK19_x      = %F ;", value = dkPRDHZOC05_QSK19_x;
    printf, text = "dkPRDHZOC18_QSK19_x      = %F ;", value = dkPRDHZOC18_QSK19_x;
    printf, text = "dkPRDHZOC60_QSK19_x      = %F ;", value = dkPRDHZOC60_QSK19_x;
    print,  text = "";   
    printf, text = "dkPRDHZOC05_SMH16_px     = %F ;", value = dkPRDHZOC05_SMH16_px;
    printf, text = "dkPRDHZOC18_SMH16_px     = %F ;", value = dkPRDHZOC18_SMH16_px;
    printf, text = "dkPRDHZOC60_SMH16_px     = %F ;", value = dkPRDHZOC60_SMH16_px;
    print,  text = "";  
    printf, text = "dkPRDHZOC05_QSK19_px     = %F ;", value = dkPRDHZOC05_QSK19_px;
    printf, text = "dkPRDHZOC18_QSK19_px     = %F ;", value = dkPRDHZOC18_QSK19_px;
    printf, text = "dkPRDHZOC60_QSK19_px     = %F ;", value = dkPRDHZOC60_QSK19_px;
    print,  text = "";    
    print, text = "kPRDHZOC05 := dkPRDHZOC05_SMH16_x * dhzoc_smh16_x_mm + dkPRDHZOC05_QSK19_x * dhzoc_qsk19_x_mm + dkPRDHZOC05_SMH16_px * dhzoc_smh16_px_urad + dkPRDHZOC05_QSK19_px * dhzoc_qsk19_px_urad;";
    print, text = "kPRDHZOC18 := dkPRDHZOC18_SMH16_x * dhzoc_smh16_x_mm + dkPRDHZOC18_QSK19_x * dhzoc_qsk19_x_mm + dkPRDHZOC18_SMH16_px * dhzoc_smh16_px_urad + dkPRDHZOC18_QSK19_px * dhzoc_qsk19_px_urad;";
    print, text = "kPRDHZOC60 := dkPRDHZOC60_SMH16_x * dhzoc_smh16_x_mm + dkPRDHZOC60_QSK19_x * dhzoc_qsk19_x_mm + dkPRDHZOC60_SMH16_px * dhzoc_smh16_px_urad + dkPRDHZOC60_QSK19_px * dhzoc_qsk19_px_urad;";
    print,  text = "";  
  } 

  assign, echo = terminal;
};
