{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "from cpymad.madx import Madx\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt \n",
    "import matplotlib\n",
    "import requests\n",
    "\n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "plt.rcParams[\"mathtext.fontset\"] = \"cm\"\n",
    "\n",
    "matplotlib.rcParams.update({'font.size': 15})\n",
    "matplotlib.rc('font',**{'family':'serif'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "def optics_plot(twiss):\n",
    "    f, ax = plt.subplots(1,figsize = (12,7))\n",
    "    \n",
    "    ax.plot(twiss.S, twiss.BETA11, color = 'darkblue', label = r'$\\beta_x$', )\n",
    "    ax.plot(twiss.S, twiss.BETA22, color = 'firebrick', label = r'$\\beta_y$')\n",
    "    ax.plot(twiss.S, twiss.DISP1*0-100, 'k', label = r'$D_x$')\n",
    "\n",
    "    ax2 = ax.twinx()\n",
    "    ax2.plot(twiss.S, twiss.DISP1, 'k', label = r'$D_x$')\n",
    "\n",
    "    bmin = (np.floor(np.min([twiss.BETA11, twiss.BETA22])/5)) * 5\n",
    "    bmax = (np.floor(np.max([twiss.BETA11, twiss.BETA22])/5) + 1) * 5  \n",
    "    b_p2p = bmax - bmin    \n",
    "    y = [bmin - b_p2p/2, bmax]\n",
    "\n",
    "    # dispersion-function:\n",
    "    if 'ps$' in twiss.NAME[0]:\n",
    "        dxmin = (np.floor(np.min(twiss.DISP1)))\n",
    "        dxmax = (np.floor(np.max(twiss.DISP1)) + 0.5)  \n",
    "        dx_p2p = dxmax - dxmin\n",
    "        dx = [dxmin, dxmax + dx_p2p*2]\n",
    "    elif 'psb$' in twiss.NAME[0]:\n",
    "        dxmin = (np.floor(np.max(twiss.DISP1)*10)/10)\n",
    "        dxmax = (np.floor(np.min(twiss.DISP1)*10)/10)  \n",
    "        dx_p2p = dxmax - dxmin\n",
    "        dx = [dxmax, dxmin - dx_p2p*2]\n",
    "    \n",
    "    ax.set_xlim(0, twiss.S[-1])\n",
    "    ax.set_ylim(y)\n",
    "    \n",
    "    ax2.set_ylim(dx)\n",
    "    \n",
    "    ax.set_xlabel('s [m]')\n",
    "    ax.set_ylabel(r'$\\beta_{x,y}$ [m]')\n",
    "    ax2.set_ylabel(r'$D_x$ [m]')\n",
    "    \n",
    "    ax.legend(frameon = False, ncol = 3, loc = 'upper center', bbox_to_anchor=(0.5, 1.12))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Setting up the MAD-X environment\n",
    "\n",
    "The MAD-X input files can be either directly loaded from Gitlab or from the EOS optics repository. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "madx = Madx()\n",
    "madx.input('BEAM, PARTICLE=PROTON, PC = {{ conf['momentum'] | string }}')\n",
    "madx.input('BRHO := BEAM->PC * 3.3356;')\n",
    "# Loading files from EOS\n",    
    "# call sequence of main units\n",
    "madx.call('/eos/project/a/acc-models/public/ps/{{ branch }}/ps_mu.seq')\n",
    "# call sequence of straight section elements\n",
    "madx.call('/eos/project/a/acc-models/public/ps/{{ branch }}/ps_ss.seq')\n",
    "# call configuration strength file\n",
    "madx.call('/eos/project/a/acc-models/public/ps/{{ branch }}/{{ conf['directory'] }}{{ conf['str'] }}')\n",
    "\n",
    "# Loading files from Gitlab\n",
    "# call sequence of main units\n",
    "# MU_sequence = requests.get('https://gitlab.cern.ch/acc-models/acc-models-ps/raw/{{ branch }}/ps_mu.seq')\n",
    "# madx.input(MU_sequence.content)\n",
    "# call sequence of straight section elements\n",
    "# SS_sequence = requests.get('https://gitlab.cern.ch/acc-models/acc-models-ps/raw/{{ branch }}/ps_ss.seq')\n",
    "# madx.input(SS_sequence.content)\n",
    "# call configuration strength file\n",
    "# strength = requests.get('https://gitlab.cern.ch/acc-models/acc-models-ps/raw/{{ branch }}/{{ conf['directory'] }}{{ conf['str'] }}')\n",
    "# madx.input(strength.content)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Performing a PTC Twiss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "madx.input('use, sequence = PS')\n",
    "madx.input('ptc_create_universe')\n",
    "madx.input('ptc_create_layout, time=false,model=2, method=6, nst=5, exact=true')\n",
    "madx.input('ptc_twiss, closed_orbit, icase=56, no=4, slice_magnets')\n",
    "madx.input('ptc_end')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Print non-zero entries of the PTC Twiss summary table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "twiss = madx.table['ptc_twiss_summary']\n",
    "for k in twiss.keys():\n",
    "    if twiss[k][0] > 0:\n",
    "        print(k + ' = ' + str(twiss[k][0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plot the optics functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "twiss = madx.table['ptc_twiss']\n",
    "\n",
    "optics_plot(twiss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
